"""
–ë–æ—Ç –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º AssemblyAI API
—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∫—ç—à–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏,
—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –∞—É–¥–∏–æ –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 2 –º–∏–Ω—É—Ç—ã —Å –ø–æ–º–æ—â—å—é ffmpeg,
–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
–∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ ChatGPT
"""
import os
import asyncio
import time
import uuid
import requests
import shutil
import signal
import sys
import subprocess
import json
import logging
from typing import Tuple, List, Optional, Dict, Any
import math
from dotenv import load_dotenv
from openai import OpenAI

from pyrogram import Client, filters
from pyrogram.types import Message
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler("bot.log")
    ]
)
logger = logging.getLogger("assemblyai_bot")

# –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ API –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_ID = os.getenv("API_ID")
API_HASH = os.getenv("API_HASH")
BOT_TOKEN = os.getenv("BOT_TOKEN")
ASSEMBLYAI_API_KEY = os.getenv("ASSEMBLYAI_API_KEY")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
CACHE_DIR = os.path.join(os.getcwd(), "cache")
AUDIO_FILES_DIR = os.path.join(CACHE_DIR, "audio_files")
SEGMENTS_DIR = os.path.join(CACHE_DIR, "audio_segments")
SESSION_DIR = os.path.join(CACHE_DIR, "sessions")
PROMPTS_FILE = os.path.join(CACHE_DIR, "user_prompts.json")

# –°–æ–∑–¥–∞—ë–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
os.makedirs(CACHE_DIR, exist_ok=True)
os.makedirs(AUDIO_FILES_DIR, exist_ok=True)
os.makedirs(SEGMENTS_DIR, exist_ok=True)
os.makedirs(SESSION_DIR, exist_ok=True)

# –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç OpenAI
openai_client = None
if OPENAI_API_KEY:
    openai_client = OpenAI(api_key=OPENAI_API_KEY)

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–µ–≥–º–µ–Ω—Ç–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (2 –º–∏–Ω—É—Ç—ã)
MAX_SEGMENT_LENGTH_SEC = 2 * 60

# –ü—Ä–æ–º–ø—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è ChatGPT
DEFAULT_PROMPT = "–°—É–º–º–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç –≤ –∫—Ä–∞—Ç–∫–æ–π —Ñ–æ—Ä–º–µ, –≤—ã–¥–µ–ª—è—è –æ—Å–Ω–æ–≤–Ω—ã–µ –º—ã—Å–ª–∏ –∏ –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã."

# –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞
SUPPORTED_LANGUAGES = {
    "ru": "–†—É—Å—Å–∫–∏–πüá∑üá∫",
    "en": "–ê–Ω–≥–ª–∏–π—Å–∫–∏–πüá¨üáß",
}

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–æ–º–ø—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
def load_user_prompts():
    if os.path.exists(PROMPTS_FILE):
        try:
            with open(PROMPTS_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–º–ø—Ç–æ–≤: {e}")
    return {}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–æ–º–ø—Ç–æ–≤ –≤ —Ñ–∞–π–ª
def save_user_prompts(prompts):
    try:
        with open(PROMPTS_FILE, 'w', encoding='utf-8') as f:
            json.dump(prompts, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ–º–ø—Ç–æ–≤: {e}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
user_prompts = load_user_prompts()

# –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

def clean_cache():
    """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∫—ç—à-–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
    print("–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞...")
    try:
        # –£–¥–∞–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∞–º–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        for dir_path in [AUDIO_FILES_DIR, SEGMENTS_DIR]:
            for filename in os.listdir(dir_path):
                file_path = os.path.join(dir_path, filename)
                if os.path.isfile(file_path):
                    os.remove(file_path)
                elif os.path.isdir(file_path):
                    shutil.rmtree(file_path)
        
        # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏–∏ Pyrogram
        for filename in os.listdir(SESSION_DIR):
            file_path = os.path.join(SESSION_DIR, filename)
            if os.path.isfile(file_path):
                os.remove(file_path)
        
        # –û—á–∏—â–∞–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        for username in list(user_states.keys()):
            user_states[username] = {}
            
        print("–ö—ç—à –æ—á–∏—â–µ–Ω")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ (Ctrl+C –∏ —Ç.–¥.)
def signal_handler(sig, frame):
    print("\n–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –∏ –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞...")
    clean_cache()
    sys.exit(0)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤
signal.signal(signal.SIGINT, signal_handler)
signal.signal(signal.SIGTERM, signal_handler)

# –û—á–∏—â–∞–µ–º –∫—ç—à –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
clean_cache()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Å–µ—Å—Å–∏–π
app = Client(
    "assemblyai_bot",
    api_id=API_ID,
    api_hash=API_HASH,
    bot_token=BOT_TOKEN,
    workdir=SESSION_DIR,  # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ —Å–µ—Å—Å–∏–π
)

def get_state(username: str) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if username not in user_states:
        user_states[username] = {}
    return user_states[username]

def set_state(username: str, key: str, value: Any) -> None:
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if username not in user_states:
        user_states[username] = {}
    user_states[username][key] = value

def clear_state(username: str, key: str = None) -> None:
    """–û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if username in user_states:
        if key:
            if key in user_states[username]:
                del user_states[username][key]
        else:
            user_states[username] = {}

def get_audio_duration(file_path):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö —Å –ø–æ–º–æ—â—å—é ffprobe"""
    try:
        cmd = [
            "ffprobe",
            "-v", "error",
            "-show_entries", "format=duration",
            "-of", "json",
            file_path
        ]
        result = subprocess.run(cmd, capture_output=True, text=True)
        data = json.loads(result.stdout)
        return float(data["format"]["duration"])
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞: {e}")
        # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–æ–ª—å—à–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, —á—Ç–æ–±—ã —Ä–∞–∑–¥–µ–ª–∏—Ç—å —Ñ–∞–π–ª
        return MAX_SEGMENT_LENGTH_SEC + 1

def split_audio_file(file_path: str) -> List[str]:
    """
    –†–∞–∑–¥–µ–ª—è–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª –Ω–∞ —Å–µ–≥–º–µ–Ω—Ç—ã –ø–æ 2 –º–∏–Ω—É—Ç—ã —Å –ø–æ–º–æ—â—å—é ffmpeg
    —Å –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    
    Args:
        file_path: –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –∞—É–¥–∏–æ—Ñ–∞–π–ª—É
        
    Returns:
        List[str]: –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ —Å–æ–∑–¥–∞–Ω–Ω—ã–º —Å–µ–≥–º–µ–Ω—Ç–∞–º
    """
    try:
        print(f"–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞: {file_path}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ
        duration_sec = get_audio_duration(file_path)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏ –∏–º–µ–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        if duration_sec <= 0:
            print("–§–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏–ª–∏ –∏–º–µ–µ—Ç –Ω—É–ª–µ–≤—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ MP3 –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω—ã—Ö –æ—à–∏–±–æ–∫
            converted_path = os.path.join(AUDIO_FILES_DIR, f"{uuid.uuid4()}.mp3")
            convert_cmd = [
                "ffmpeg",
                "-i", file_path,
                "-c:a", "libmp3lame",
                "-q:a", "4",
                converted_path
            ]
            subprocess.run(convert_cmd, capture_output=True)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            duration_sec = get_audio_duration(converted_path)
            file_path = converted_path
        
        # –ï—Å–ª–∏ —Ñ–∞–π–ª –º–µ–Ω—å—à–µ 2 –º–∏–Ω—É—Ç, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ MP3 –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
        if duration_sec <= MAX_SEGMENT_LENGTH_SEC:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ MP3 –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            converted_path = os.path.join(AUDIO_FILES_DIR, f"{uuid.uuid4()}.mp3")
            convert_cmd = [
                "ffmpeg",
                "-i", file_path,
                "-c:a", "libmp3lame",
                "-q:a", "4",  # –ö–∞—á–µ—Å—Ç–≤–æ MP3 (0-9, –≥–¥–µ 0 –ª—É—á—à–µ–µ)
                converted_path
            ]
            subprocess.run(convert_cmd, capture_output=True)
            return [converted_path]
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–µ–≥–º–µ–Ω—Ç–æ–≤
        num_segments = math.ceil(duration_sec / MAX_SEGMENT_LENGTH_SEC)
        
        print(f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ: {duration_sec} —Å–µ–∫, —Å–æ–∑–¥–∞–Ω–∏–µ {num_segments} —Å–µ–≥–º–µ–Ω—Ç–æ–≤")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–≥–º–µ–Ω—Ç–æ–≤
        segment_paths = []
        for i in range(num_segments):
            start_sec = i * MAX_SEGMENT_LENGTH_SEC
            segment_id = str(uuid.uuid4())
            segment_path = os.path.join(SEGMENTS_DIR, f"{segment_id}.mp3")
            
            # –ö–æ–º–∞–Ω–¥–∞ ffmpeg –¥–ª—è –≤—ã—Ä–µ–∑–∞–Ω–∏—è —Å–µ–≥–º–µ–Ω—Ç–∞ —Å –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            cmd = [
                "ffmpeg",
                "-i", file_path,
                "-ss", str(start_sec),
                "-t", str(MAX_SEGMENT_LENGTH_SEC),
                "-c:a", "libmp3lame",  # –ü–µ—Ä–µ–∫–æ–¥–∏—Ä—É–µ–º –≤ MP3
                "-q:a", "4",  # –ö–∞—á–µ—Å—Ç–≤–æ MP3 (0-9, –≥–¥–µ 0 –ª—É—á—à–µ–µ)
                "-ar", "44100",  # –ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏
                segment_path
            ]
            
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
            result = subprocess.run(cmd, capture_output=True, text=True)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            if os.path.exists(segment_path) and os.path.getsize(segment_path) > 0:
                segment_paths.append(segment_path)
                print(f"–°–æ–∑–¥–∞–Ω —Å–µ–≥–º–µ–Ω—Ç {i+1}/{num_segments}: {segment_path}")
            else:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ–≥–º–µ–Ω—Ç–∞ {i+1}/{num_segments}: {result.stderr}")
                # –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞ —Å –¥—Ä—É–≥–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                retry_cmd = [
                    "ffmpeg",
                    "-i", file_path,
                    "-ss", str(start_sec),
                    "-t", str(MAX_SEGMENT_LENGTH_SEC),
                    "-c:a", "aac",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º AAC –∫–æ–¥–µ–∫ –∫–∞–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É
                    "-b:a", "128k",  # –ë–∏—Ç—Ä–µ–π—Ç
                    "-ar", "44100",
                    segment_path
                ]
                subprocess.run(retry_cmd, capture_output=True)
                
                if os.path.exists(segment_path) and os.path.getsize(segment_path) > 0:
                    segment_paths.append(segment_path)
                    print(f"–°–æ–∑–¥–∞–Ω —Å–µ–≥–º–µ–Ω—Ç {i+1}/{num_segments} (–ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞): {segment_path}")
        
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ–≥–º–µ–Ω—Ç—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª
        if not segment_paths:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ–≥–º–µ–Ω—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª")
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –≤ MP3
            converted_path = os.path.join(AUDIO_FILES_DIR, f"{uuid.uuid4()}.mp3")
            convert_cmd = [
                "ffmpeg",
                "-i", file_path,
                "-c:a", "libmp3lame",
                "-q:a", "4",
                converted_path
            ]
            subprocess.run(convert_cmd, capture_output=True)
            return [converted_path]
        
        return segment_paths
    
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–∏ –∞—É–¥–∏–æ: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –≤ MP3
        try:
            converted_path = os.path.join(AUDIO_FILES_DIR, f"{uuid.uuid4()}.mp3")
            convert_cmd = [
                "ffmpeg",
                "-i", file_path,
                "-c:a", "libmp3lame",
                "-q:a", "4",
                converted_path
            ]
            subprocess.run(convert_cmd, capture_output=True)
            if os.path.exists(converted_path) and os.path.getsize(converted_path) > 0:
                return [converted_path]
        except:
            pass
        
        # –ï—Å–ª–∏ –≤—Å–µ –º–µ—Ç–æ–¥—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª
        return [file_path]

async def download_large_file(message: Message, file_id: str, save_path: str) -> Tuple[bool, str]:
    """
    –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –±–æ–ª—å—à–æ–≥–æ —Ñ–∞–π–ª–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        file_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ñ–∞–π–ª–∞
        save_path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
        
    Returns:
        Tuple[bool, str]: –£—Å–ø–µ—Ö –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ/–ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
    """
    try:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–≥—Ä—É–∑–∫–µ
        status_msg = await message.reply("‚è≥ –°–∫–∞—á–∏–≤–∞—é —Ñ–∞–π–ª...")
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        os.makedirs(os.path.dirname(save_path), exist_ok=True)
        
        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        start_time = time.time()
        await app.download_media(message=file_id, file_name=save_path)
        download_time = time.time() - start_time
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ –ø—É—Å—Ç–æ–π
        if not os.path.exists(save_path) or os.path.getsize(save_path) == 0:
            await status_msg.edit_text("‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ —Å–∫–∞—á–∞–ª—Å—è –∏–ª–∏ –ø—É—Å—Ç–æ–π")
            return False, "–§–∞–π–ª –Ω–µ —Å–∫–∞—á–∞–ª—Å—è –∏–ª–∏ –ø—É—Å—Ç–æ–π"
        
        file_size_mb = os.path.getsize(save_path) / (1024 * 1024)
        logger.info(f"–§–∞–π–ª —Å–∫–∞—á–∞–Ω: {save_path}, —Ä–∞–∑–º–µ—Ä: {file_size_mb:.2f} –ú–ë, –≤—Ä–µ–º—è: {download_time:.2f}—Å")
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        await status_msg.edit_text("‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ...")
        
        return True, save_path
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}", exc_info=True)
        try:
            await status_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}")
        except:
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}")
        return False, str(e)

async def transcribe_with_assemblyai(audio_path: str, message: Message, status_msg: Message = None, target_language: str = "auto") -> Tuple[bool, str]:
    """
    –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∞—É–¥–∏–æ —Å –ø–æ–º–æ—â—å—é AssemblyAI API —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    
    Args:
        audio_path: –ü—É—Ç—å –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—É
        message: –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        status_msg: –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        target_language: –ö–æ–¥ —Ü–µ–ª–µ–≤–æ–≥–æ —è–∑—ã–∫–∞ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "auto" - –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π)
        
    Returns:
        Tuple[bool, str]: –£—Å–ø–µ—Ö –∏ —Ç–µ–∫—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏/—Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    """
    try:
        if status_msg:
            await status_msg.edit_text("üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é...")
        else:
            status_msg = await message.reply("üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        file_size = os.path.getsize(audio_path)
        file_size_mb = file_size / (1024 * 1024)
        logger.info(f"–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {file_size_mb:.2f} –ú–ë")
        
        # –ï—Å–ª–∏ —Ñ–∞–π–ª –±–æ–ª—å—à–µ 20–ú–ë, —Å–∂–∏–º–∞–µ–º –µ–≥–æ
        if file_size > 20 * 1024 * 1024:
            await status_msg.edit_text(f"‚öôÔ∏è –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({file_size_mb:.2f} –ú–ë). –û–ø—Ç–∏–º–∏–∑–∏—Ä—É—é –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏...")
            compressed_path = os.path.join(AUDIO_FILES_DIR, f"{uuid.uuid4()}.mp3")
            
            compress_cmd = [
                "ffmpeg",
                "-i", audio_path,
                "-c:a", "libmp3lame",
                "-b:a", "64k",  # –ù–∏–∑–∫–∏–π –±–∏—Ç—Ä–µ–π—Ç –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
                compressed_path
            ]
            
            result = subprocess.run(compress_cmd, capture_output=True, text=True)
            
            if os.path.exists(compressed_path) and os.path.getsize(compressed_path) > 0:
                compressed_size_mb = os.path.getsize(compressed_path) / (1024 * 1024)
                logger.info(f"–§–∞–π–ª —Å–∂–∞—Ç –¥–æ {compressed_size_mb:.2f} –ú–ë")
                await status_msg.edit_text(f"‚úÖ –§–∞–π–ª –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω ({compressed_size_mb:.2f} –ú–ë). –û—Ç–ø—Ä–∞–≤–ª—è—é –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é...")
                audio_path = compressed_path
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∂–∞—Ç–∏–∏ —Ñ–∞–π–ª–∞: {result.stderr}")
                await status_msg.edit_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª. –ü—Ä–æ–±—É—é –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å...")
        
        # –°—Ç–∞—Ä—Ç–æ–≤–æ–µ –≤—Ä–µ–º—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        start_time = time.time()
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä AssemblyAI
        headers = {
            "authorization": ASSEMBLYAI_API_KEY,
            "content-type": "application/json"
        }
        
        await status_msg.edit_text("üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –∞—É–¥–∏–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è...")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ (–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ)
        def upload_file():
            with open(audio_path, "rb") as f:
                response = requests.post(
                    "https://api.assemblyai.com/v2/upload",
                    headers=headers,
                    data=f,
                    timeout=300  # 5 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç
                )
            
            if response.status_code != 200:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {response.text}")
                raise Exception(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {response.text}")
            
            return response.json()["upload_url"]
        
        try:
            upload_url = await asyncio.get_event_loop().run_in_executor(None, upload_file)
            logger.info(f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω, URL: {upload_url}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {e}")
            await status_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
            return False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {str(e)}"
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ (–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–ª–∏ –ø–µ—Ä–µ–≤–æ–¥)
        if target_language == "auto":
            await status_msg.edit_text(f"‚è≥ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω. –ù–∞—á–∏–Ω–∞—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —è–∑—ã–∫–∞...")
        else:
            target_lang_name = SUPPORTED_LANGUAGES.get(target_language, target_language)
            await status_msg.edit_text(f"‚è≥ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω. –ù–∞—á–∏–Ω–∞—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –Ω–∞ {target_lang_name}...")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è API
        data = {
            "audio_url": upload_url,
        }
        
        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —è–∑—ã–∫, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –∑–∞–ø—Ä–æ—Å
        if target_language != "auto":
            data["language_code"] = target_language
        
        response = requests.post(
            "https://api.assemblyai.com/v2/transcript",
            json=data,
            headers=headers
        )
        
        if response.status_code != 200:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è: {response.text}")
            await status_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {response.text}")
            return False, f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è: {response.text}"
        
        transcript_id = response.json()["id"]
        logger.info(f"ID —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {transcript_id}")
        
        # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        progress_updates = 0
        last_update_time = time.time()
        
        while True:
            current_time = time.time()
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
            if current_time - last_update_time >= 10:
                progress_updates += 1
                elapsed_time = current_time - start_time
                await status_msg.edit_text(f"‚è≥ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É—é –∞—É–¥–∏–æ... ({elapsed_time:.0f}—Å)")
                last_update_time = current_time
            
            response = requests.get(
                f"https://api.assemblyai.com/v2/transcript/{transcript_id}",
                headers=headers
            )
            
            if response.status_code != 200:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞: {response.text}")
                await status_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {response.text}")
                return False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞: {response.text}"
            
            status = response.json()["status"]
            logger.info(f"–°—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {status}")
            
            if status == "completed":
                total_time = time.time() - start_time
                # –ü–æ–ª—É—á–∞–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —è–∑—ã–∫ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                detected_language = response.json().get("language_code", "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")
                detected_lang_name = SUPPORTED_LANGUAGES.get(detected_language, detected_language)
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
                transcription_text = response.json()["text"]
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
                if target_language == "auto":
                    # –ï—Å–ª–∏ –±—ã–ª –∑–∞–ø—Ä–æ—à–µ–Ω –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —è–∑—ã–∫
                    await status_msg.edit_text(f"‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
                                            f"üëÇ –û–ø—Ä–µ–¥–µ–ª–µ–Ω —è–∑—ã–∫ –∞—É–¥–∏–æ: {detected_lang_name}")
                else:
                    # –ï—Å–ª–∏ –±—ã–ª –∑–∞–ø—Ä–æ—à–µ–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —è–∑—ã–∫
                    await status_msg.edit_text(f"‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
                                            f"üëÇ –ò—Å—Ö–æ–¥–Ω—ã–π —è–∑—ã–∫ –∞—É–¥–∏–æ: {detected_lang_name}")
                
                return True, transcription_text
                
            elif status == "error":
                error_msg = response.json().get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                logger.error(f"–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {error_msg}")
                await status_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {error_msg}")
                return False, f"–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {error_msg}"
            
            # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            await asyncio.sleep(3)
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {e}", exc_info=True)
        if status_msg:
            await status_msg.edit_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        else:
            await message.reply(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        return False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {str(e)}"
    
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        try:
            if os.path.exists(audio_path):
                os.remove(audio_path)
                logger.info(f"–£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {audio_path}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ ChatGPT API
async def process_with_chatgpt(text, prompt, message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ ChatGPT API —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
    
    Args:
        text: –¢–µ–∫—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        prompt: –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è ChatGPT
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    
    Returns:
        str: –û—Ç–≤–µ—Ç –æ—Ç ChatGPT –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    """
    status_msg = await message.reply("üß† –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é ChatGPT...")
    
    try:
        if not openai_client:
            return "‚ùå –û—à–∏–±–∫–∞: API –∫–ª—é—á OpenAI –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞."
        
        response = openai_client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": prompt},
                {"role": "user", "content": text}
            ],
            temperature=0.7,
            max_tokens=2000
        )
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
        result = response.choices[0].message.content
        await status_msg.edit_text("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ ChatGPT –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        return result
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ ChatGPT API: {e}", exc_info=True)
        await status_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞: {str(e)}")
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞: {str(e)}"

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
async def show_language_selection(message: Message, file_path: str) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
    
    Args:
        message: –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        file_path: –ü—É—Ç—å –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—É
    """
    # –ü–æ–ª—É—á–∞–µ–º username –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    username = message.from_user.username or str(message.from_user.id)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    set_state(username, "file_path", file_path)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —è–∑—ã–∫–∞–º–∏
    keyboard = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º —è–∑—ã–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞, –ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É
    for lang_code, lang_name in SUPPORTED_LANGUAGES.items():
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º auto, –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏–º –µ–≥–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å
        if lang_code == "auto":
            continue
            
        keyboard.append([
            InlineKeyboardButton(
                lang_name, 
                callback_data=f"lang_{lang_code}"
            )
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã –ø—Ä–æ—Ü–µ—Å—Å–∞
    keyboard.append([
        InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="cancel_transcription")
    ])
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await message.reply(
        "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏:\n",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
@app.on_callback_query(filters.regex(r"^lang_(.+)$"))
async def handle_language_selection(client, callback_query):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
        data_parts = callback_query.data.split("_")
        if len(data_parts) != 2:
            await callback_query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            return
            
        language_code = data_parts[1]  # –ö–æ–¥ —è–∑—ã–∫–∞
        
        # –ü–æ–ª—É—á–∞–µ–º username –∏ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        username = callback_query.from_user.username or str(callback_query.from_user.id)
        file_path = get_state(username).get("file_path")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if not file_path or not os.path.exists(file_path):
            await callback_query.answer("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∫—É")
            await callback_query.message.edit_text("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–¥–∞–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –∑–∞–Ω–æ–≤–æ.")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        set_state(username, "language", language_code)
        
        # –°–æ–æ–±—â–∞–µ–º, —á—Ç–æ —è–∑—ã–∫ –≤—ã–±—Ä–∞–Ω
        lang_name = SUPPORTED_LANGUAGES.get(language_code, "–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π")
        await callback_query.answer(f"–í—ã–±—Ä–∞–Ω —è–∑—ã–∫: {lang_name}")
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        status_msg = await callback_query.message.edit_text(
            f"üî§ –í—ã–±—Ä–∞–Ω —è–∑—ã–∫: {lang_name}\n‚è≥ –ù–∞—á–∏–Ω–∞—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é...",
            reply_markup=None
        )
        
        # –ó–∞–ø—É—Å–∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —è–∑—ã–∫–æ–º
        success, transcription = await transcribe_with_assemblyai(
            file_path, 
            callback_query.message, 
            status_msg, 
            language_code
        )
        
        if success:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            set_state(username, "transcription", transcription)
            
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏–π —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π
            # –í —Ñ—É–Ω–∫—Ü–∏–∏ handle_language_selection –º–µ–Ω—è–µ–º –∫–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏–π —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π
            keyboard = [
                [InlineKeyboardButton("üìù –ü–æ–∫–∞–∑–∞—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é", callback_data="action_show_transcription")],
                [InlineKeyboardButton("üß† –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —á–µ—Ä–µ–∑ ChatGPT", callback_data="action_process_gpt")],
                [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="back_to_language")]
            ]
            
            await callback_query.message.reply(
                "‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
            logger.info(f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞ –¥–ª—è {username}, –¥–ª–∏–Ω–∞: {len(transcription)} —Å–∏–º–≤–æ–ª–æ–≤")
        else:
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            await callback_query.message.reply(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é: {transcription}")
            logger.error(f"–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {transcription}")
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            clear_state(username, "transcribing")
            clear_state(username, "file_path")
            clear_state(username, "language")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞: {e}", exc_info=True)
        await callback_query.message.reply(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        username = callback_query.from_user.username or str(callback_query.from_user.id)
        clear_state(username, "transcribing")
        clear_state(username, "file_path")
        clear_state(username, "language")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π
@app.on_callback_query(filters.regex(r"^action_(.+)$"))
async def handle_action_selection(client, callback_query):
    try:
        username = callback_query.from_user.username or str(callback_query.from_user.id)
        action = callback_query.data.split("_", 1)[1]
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
        transcription = get_state(username).get("transcription")
        
        if not transcription:
            await callback_query.answer("–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            await callback_query.message.edit_text(
                "‚ùå –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –∑–∞–Ω–æ–≤–æ.",
                reply_markup=None
            )
            return
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
        if action == "show_transcription":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
            await callback_query.answer("–ü–æ–∫–∞–∑—ã–≤–∞—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é")
            
            # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ 3000 —Å–∏–º–≤–æ–ª–æ–≤ (—á—Ç–æ–±—ã —É–º–µ—Å—Ç–∏—Ç—å—Å—è –≤ –ª–∏–º–∏—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π)
            page_size = 3000
            pages = [transcription[i:i+page_size] for i in range(0, len(transcription), page_size)]
            total_pages = len(pages)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            set_state(username, "transcription_pages", pages)
            set_state(username, "current_page", 0)
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
            keyboard = []
            
            # –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            if total_pages > 1:
                nav_buttons = []
                nav_buttons.append(InlineKeyboardButton("‚óÄÔ∏è", callback_data="page_prev"))
                nav_buttons.append(InlineKeyboardButton(f"1/{total_pages}", callback_data="page_info"))
                nav_buttons.append(InlineKeyboardButton("‚ñ∂Ô∏è", callback_data="page_next"))
                keyboard.append(nav_buttons)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_actions")])
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            await callback_query.message.edit_text(
                f"üìù **–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏** (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ 1/{total_pages}):\n\n{pages[0]}",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
        elif action == "process_gpt":
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É API –∫–ª—é—á–∞
            if not openai_client:
                await callback_query.answer("ChatGPT –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                await callback_query.message.edit_text(
                    "‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ ChatGPT –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.\n"
                    "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞.",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_actions")]
                    ])
                )
                return
            
            await callback_query.answer("–û—Ç–ø—Ä–∞–≤–ª—è—é –≤ ChatGPT")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º–ø—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–º–ø—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            prompt = user_prompts.get(username, DEFAULT_PROMPT)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            await callback_query.message.edit_text(
                "üß† –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é ChatGPT...",
                reply_markup=None
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ ChatGPT
            try:
                if not openai_client:
                    result = "‚ùå –û—à–∏–±–∫–∞: API –∫–ª—é—á OpenAI –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞."
                else:
                    response = openai_client.chat.completions.create(
                        model="gpt-3.5-turbo",
                        messages=[
                            {"role": "system", "content": prompt},
                            {"role": "user", "content": transcription}
                        ],
                        temperature=0.7,
                        max_tokens=2000
                    )
                    result = response.choices[0].message.content
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ ChatGPT API: {e}", exc_info=True)
                result = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞: {str(e)}"
            
            # –†–∞–∑–±–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –∫–∞–∫ –∏ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
            page_size = 3000
            pages = [result[i:i+page_size] for i in range(0, len(result), page_size)]
            total_pages = len(pages)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            set_state(username, "gpt_result_pages", pages)
            set_state(username, "current_gpt_page", 0)
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
            keyboard = []
            
            # –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            if total_pages > 1:
                nav_buttons = []
                nav_buttons.append(InlineKeyboardButton("‚óÄÔ∏è", callback_data="gpt_page_prev"))
                nav_buttons.append(InlineKeyboardButton(f"1/{total_pages}", callback_data="gpt_page_info"))
                nav_buttons.append(InlineKeyboardButton("‚ñ∂Ô∏è", callback_data="gpt_page_next"))
                keyboard.append(nav_buttons)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_actions")])
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            await callback_query.message.edit_text(
                f"üß† **–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ ChatGPT** (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ 1/{total_pages}):\n\n{pages[0]}",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–µ–π—Å—Ç–≤–∏—è: {e}", exc_info=True)
        await callback_query.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
        await callback_query.message.edit_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_actions")]
            ])
        )
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/–∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞
@app.on_message(filters.command("setprompt"))
async def set_prompt_command(client, message):
    try:
        username = message.from_user.username or str(message.from_user.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
        if len(message.text.split(' ', 1)) < 2:
            # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç–∞ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–º–ø—Ç –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
            current_prompt = user_prompts.get(username, DEFAULT_PROMPT)
            await message.reply(
                f"üìù **–í–∞—à —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–º–ø—Ç:**\n\n`{current_prompt}`\n\n"
                "–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–ø—Ç, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "`/setprompt –¢–µ–∫—Å—Ç –≤–∞—à–µ–≥–æ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞`"
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        prompt_text = message.text.split(' ', 1)[1].strip()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–ø—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_prompts[username] = prompt_text
        save_user_prompts(user_prompts)
        
        await message.reply(
            "‚úÖ –í–∞—à –ø—Ä–æ–º–ø—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n"
            f"üìù **–ù–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç:**\n\n`{prompt_text}`\n\n"
            "–≠—Ç–æ—Ç –ø—Ä–æ–º–ø—Ç –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π –≤ ChatGPT."
        )
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–æ–º–ø—Ç–∞: {e}", exc_info=True)
        await message.reply(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø—Ä–æ–º–ø—Ç–∞ –∫ –∑–Ω–∞—á–µ–Ω–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
@app.on_message(filters.command("resetprompt"))
async def reset_prompt_command(client, message):
    try:
        username = message.from_user.username or str(message.from_user.id)
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–º–ø—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –±—ã–ª
        if username in user_prompts:
            del user_prompts[username]
            save_user_prompts(user_prompts)
        
        await message.reply(
            "‚úÖ –í–∞—à –ø—Ä–æ–º–ø—Ç —Å–±—Ä–æ—à–µ–Ω –∫ –∑–Ω–∞—á–µ–Ω–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é!\n\n"
            f"üìù **–ü—Ä–æ–º–ø—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:**\n\n`{DEFAULT_PROMPT}`"
        )
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ø—Ä–æ–º–ø—Ç–∞: {e}", exc_info=True)
        await message.reply(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

@app.on_message(filters.command("start"))
async def start_command(client, message):
    username = message.from_user.username or str(message.from_user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–º–ø—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π
    current_prompt = user_prompts.get(username, DEFAULT_PROMPT)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    keyboard = [
        [InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–ø—Ç", callback_data="change_prompt")],
        [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="show_help")]
    ]
    
    await message.reply(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∞—É–¥–∏–æ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —á–µ—Ä–µ–∑ ChatGPT.\n\n"
        "üì± **–ß—Ç–æ —è —É–º–µ—é:**\n"
        "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å —è–∑—ã–∫ –∞—É–¥–∏–æ\n"
        "‚Ä¢ –ü–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ —Ä–∞–∑–Ω—ã–µ —è–∑—ã–∫–∏\n"
        "‚Ä¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ ChatGPT —Å –≤–∞—à–∏–º –ø—Ä–æ–º–ø—Ç–æ–º\n\n"
        "üéß –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.\n\n"
        f"üìù **–í–∞—à —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–º–ø—Ç –¥–ª—è ChatGPT:**\n`{current_prompt}`",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

@app.on_message(filters.command("help"))
async def help_command(client, message):
    # –°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ —è–∑—ã–∫–æ–≤ –¥–ª—è –ø–æ–º–æ—â–∏
    languages_list = "\n".join([f"‚Ä¢ {name}" for code, name in SUPPORTED_LANGUAGES.items()])
    
    await message.reply(
        "üìã **–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–∏–º –±–æ—Ç–æ–º:**\n\n"
        "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª (MP3, OGG, WAV –∏ –¥—Ä.)\n"
        "2. –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç —è–∑—ã–∫ –∞—É–¥–∏–æ\n"
        "3. –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏:\n"
        "   - '–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —è–∑—ã–∫' - —Ç–µ–∫—Å—Ç –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –Ω–∞ —è–∑—ã–∫–µ –∞—É–¥–∏–æ\n"
        "   - –õ—é–±–æ–π –¥—Ä—É–≥–æ–π —è–∑—ã–∫ - —Ç–µ–∫—Å—Ç –±—É–¥–µ—Ç –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫\n"
        "4. –ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ:\n"
        "   - –ü—Ä–æ—Å—Ç–æ –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏\n"
        "   - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –≤ ChatGPT —Å –≤–∞—à–∏–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º\n\n"
        "**–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:**\n"
        "/setprompt [—Ç–µ–∫—Å—Ç] - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–º–ø—Ç –¥–ª—è ChatGPT\n"
        "/resetprompt - —Å–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–º–ø—Ç –∫ –∑–Ω–∞—á–µ–Ω–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é\n"
        "/languages - –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏\n"
        "/status - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–∏—Ö –∑–∞–¥–∞—á\n"
        "/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É\n\n"
        "**–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:**\n"
        f"{languages_list}\n\n"
        "–ë–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é AssemblyAI –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é ChatGPT –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞."
    )

@app.on_message(filters.command("languages"))
async def languages_command(client, message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —è–∑—ã–∫–æ–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞"""
    # –°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ —è–∑—ã–∫–æ–≤
    languages_list = "\n".join([f"‚Ä¢ {name} ({code})" for code, name in SUPPORTED_LANGUAGES.items() if code != "auto"])
    
    await message.reply(
        "üåê **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:**\n\n"
        f"{languages_list}\n\n"
        "–ü—Ä–∏ –≤—ã–±–æ—Ä–µ '–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —è–∑—ã–∫' —Å–∏—Å—Ç–µ–º–∞ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç —è–∑—ã–∫ –∞—É–¥–∏–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏ "
        "–ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –Ω–∞ –∏—Å—Ö–æ–¥–Ω–æ–º —è–∑—ã–∫–µ –±–µ–∑ –ø–µ—Ä–µ–≤–æ–¥–∞."
    )

@app.on_message(filters.command("status"))
async def status_command(client, message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π"""
    username = message.from_user.username or str(message.from_user.id)
    
    if username in user_states and "transcribing" in user_states[username]:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ —è–∑—ã–∫
        language_info = ""
        if "language" in user_states[username]:
            lang_code = user_states[username]["language"]
            lang_name = SUPPORTED_LANGUAGES.get(lang_code, "–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º")
            language_info = f" –Ω–∞ {lang_name} —è–∑—ã–∫–µ"
        
        await message.reply(f"‚è≥ –£ –≤–∞—Å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏{language_info} –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ.")
    else:
        await message.reply("‚úÖ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏.")

@app.on_message(filters.command("cancel"))
async def cancel_command(client, message):
    """–û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é"""
    username = message.from_user.username or str(message.from_user.id)
    
    if username in user_states and "transcribing" in user_states[username]:
        clear_state(username, "transcribing")
        clear_state(username, "file_path")
        clear_state(username, "language")
        clear_state(username, "transcription")
        await message.reply("‚úÖ –ó–∞–¥–∞—á–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    else:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –æ—Ç–º–µ–Ω—ã.")

async def process_audio_file(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–º
    """
    try:
        username = message.from_user.username or str(message.from_user.id)
        logger.info(f"–ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞
        file_id = None
        file_name = None
        
        if message.audio:
            file_id = message.audio.file_id
            file_name = message.audio.file_name or f"audio_{message.id}.mp3"
            logger.info(f"–ü–æ–ª—É—á–µ–Ω –∞—É–¥–∏–æ—Ñ–∞–π–ª: {file_id}")
        elif message.voice:
            file_id = message.voice.file_id
            file_name = f"voice_{message.id}.ogg"
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {file_id}")
        elif message.document:
            file_id = message.document.file_id
            file_name = message.document.file_name or f"document_{message.id}"
            logger.info(f"–ü–æ–ª—É—á–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç: {file_id}, mime_type: {message.document.mime_type}")
        else:
            logger.warning("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤")
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª.")
            return
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        file_name = f"{int(time.time())}_{file_name}"
        save_path = os.path.join(AUDIO_FILES_DIR, file_name)
        
        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ {save_path}")
        success, result = await download_large_file(message, file_id, save_path)
        
        if success:
            # –ï—Å–ª–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±–æ—Ä —è–∑—ã–∫–∞
            logger.info("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±–æ—Ä —è–∑—ã–∫–∞")
            await show_language_selection(message, save_path)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            set_state(username, "file_path", save_path)
            set_state(username, "transcribing", True)
        else:
            # –ï—Å–ª–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, —Å–æ–æ–±—â–∞–µ–º –æ–± –æ—à–∏–±–∫–µ
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {result}")
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {result}")
            clear_state(username, "transcribing")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞: {e}", exc_info=True)
        await message.reply(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞: {str(e)}")
        clear_state(username, "transcribing")

@app.on_message(filters.audio | filters.voice | filters.document)
async def handle_audio(client, message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏–π, –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    """
    try:
        username = message.from_user.username or str(message.from_user.id)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –∞—É–¥–∏–æ-–¥–æ–∫—É–º–µ–Ω—Ç
        if message.document and not message.document.mime_type.startswith("audio/"):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∞—É–¥–∏–æ-—Ñ–æ—Ä–º–∞—Ç–æ–≤
            file_ext = os.path.splitext(message.document.file_name)[1].lower() if message.document.file_name else ""
            if file_ext not in [".mp3", ".ogg", ".wav", ".flac", ".m4a", ".aac"]:
                await message.reply("–≠—Ç–æ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –Ω–µ –ø–æ—Ö–æ–∂ –Ω–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏.")
                return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        if username in user_states and "transcribing" in user_states[username]:
            await message.reply(
                "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏. "
                "–î–æ–∂–¥–∏—Ç–µ—Å—å –µ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π /cancel."
            )
            return
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        set_state(username, "transcribing", True)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞
        await process_audio_file(message)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ: {e}", exc_info=True)
        await message.reply(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ: {str(e)}")
        
        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        clear_state(username, "transcribing")

@app.on_message(filters.text)
async def handle_text(client, message):
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–º–∞–Ω–¥–∞–º–∏
    if message.text.startswith('/'):
        return
    
    await message.reply(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏ –∏–ª–∏ /languages –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —è–∑—ã–∫–æ–≤."
    )

@app.on_callback_query(filters.regex(r"^change_prompt$"))
async def change_prompt_callback(client, callback_query):
    try:
        username = callback_query.from_user.username or str(callback_query.from_user.id)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback_query.message.edit_text(
            "üìù **–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è ChatGPT**\n\n"
            "–ß—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
            "`/setprompt –í–∞—à –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç`\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
            "`/setprompt –í—ã–¥–µ–ª–∏ –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã –∏ —Å–¥–µ–ª–∞–π –∫—Ä–∞—Ç–∫–∏–π –∫–æ–Ω—Å–ø–µ–∫—Ç –ø–æ —ç—Ç–æ–º—É —Ç–µ–∫—Å—Ç—É.`\n\n"
            "–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É –ø—Ä–æ–º–ø—Ç—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
            "`/resetprompt`",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
        await callback_query.answer("–û—Ç–∫—Ä—ã–≤–∞—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–º–ø—Ç–∞")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞: {e}", exc_info=True)
        await callback_query.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

@app.on_callback_query(filters.regex(r"^show_help$"))
async def show_help_callback(client, callback_query):
    try:
        # –°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ —è–∑—ã–∫–æ–≤ –¥–ª—è –ø–æ–º–æ—â–∏
        languages_list = "\n".join([f"‚Ä¢ {name}" for code, name in SUPPORTED_LANGUAGES.items()])
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback_query.message.edit_text(
            "üìã **–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–∏–º –±–æ—Ç–æ–º:**\n\n"
            "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª (MP3, OGG, WAV –∏ –¥—Ä.)\n"
            "2. –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç —è–∑—ã–∫ –∞—É–¥–∏–æ\n"
            "3. –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏\n"
            "4. –ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ:\n"
            "   - –ü—Ä–æ—Å—Ç–æ –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏\n"
            "   - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –≤ ChatGPT —Å –≤–∞—à–∏–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º\n\n"
            "**–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:**\n"
            "/setprompt [—Ç–µ–∫—Å—Ç] - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–º–ø—Ç –¥–ª—è ChatGPT\n"
            "/resetprompt - —Å–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–º–ø—Ç –∫ –∑–Ω–∞—á–µ–Ω–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é\n"
            "/languages - –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏\n"
            "/status - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–∏—Ö –∑–∞–¥–∞—á\n"
            "/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É\n\n"
            "**–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:**\n"
            f"{languages_list}",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
        await callback_query.answer("–û—Ç–∫—Ä—ã–≤–∞—é —Å–ø—Ä–∞–≤–∫—É")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–ø—Ä–∞–≤–∫–∏: {e}", exc_info=True)
        await callback_query.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@app.on_callback_query(filters.regex(r"^back_to_main$"))
async def back_to_main_callback(client, callback_query):
    try:
        username = callback_query.from_user.username or str(callback_query.from_user.id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–º–ø—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π
        current_prompt = user_prompts.get(username, DEFAULT_PROMPT)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        keyboard = [
            [InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–ø—Ç", callback_data="change_prompt")],
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="show_help")]
        ]
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤–æ–∑–≤—Ä–∞—â–∞—è –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await callback_query.message.edit_text(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∞—É–¥–∏–æ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —á–µ—Ä–µ–∑ ChatGPT.\n\n"
            "üì± **–ß—Ç–æ —è —É–º–µ—é:**\n"
            "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å —è–∑—ã–∫ –∞—É–¥–∏–æ\n"
            "‚Ä¢ –ü–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ —Ä–∞–∑–Ω—ã–µ —è–∑—ã–∫–∏\n"
            "‚Ä¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ ChatGPT —Å –≤–∞—à–∏–º –ø—Ä–æ–º–ø—Ç–æ–º\n\n"
            "üéß –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.\n\n"
            f"üìù **–í–∞—à —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–º–ø—Ç –¥–ª—è ChatGPT:**\n`{current_prompt}`",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
        await callback_query.answer("–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: {e}", exc_info=True)
        await callback_query.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

@app.on_callback_query(filters.regex(r"^back_to_language$"))
async def back_to_language_callback(client, callback_query):
    try:
        username = callback_query.from_user.username or str(callback_query.from_user.id)
        file_path = get_state(username).get("file_path")
        
        if not file_path or not os.path.exists(file_path):
            await callback_query.answer("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ")
            await callback_query.message.edit_text(
                "‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–¥–∞–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –∑–∞–Ω–æ–≤–æ."
            )
            return
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —è–∑—ã–∫–∞–º–∏ –∑–∞–Ω–æ–≤–æ
        keyboard = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º —è–∑—ã–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞, –ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É
        for lang_code, lang_name in SUPPORTED_LANGUAGES.items():
            if lang_code == "auto":
                continue
                
            keyboard.append([
                InlineKeyboardButton(
                    lang_name, 
                    callback_data=f"lang_{lang_code}"
                )
            ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã –ø—Ä–æ—Ü–µ—Å—Å–∞
        keyboard.append([
            InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="cancel_transcription")
        ])
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —è–∑—ã–∫–∞
        await callback_query.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏:\n",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
        await callback_query.answer("–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –∫ –≤—ã–±–æ—Ä—É —è–∑—ã–∫–∞")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –≤—ã–±–æ—Ä—É —è–∑—ã–∫–∞: {e}", exc_info=True)
        await callback_query.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
    
@app.on_callback_query(filters.regex(r"^cancel_transcription$"))
async def cancel_transcription_callback(client, callback_query):
    try:
        username = callback_query.from_user.username or str(callback_query.from_user.id)
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        clear_state(username, "transcribing")
        clear_state(username, "file_path")
        clear_state(username, "language")
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback_query.message.edit_text(
            "‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–π –∞—É–¥–∏–æ—Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
        )
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
        await callback_query.answer("–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {e}", exc_info=True)
        await callback_query.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

@app.on_callback_query(filters.regex(r"^back_to_actions$"))
async def back_to_actions_callback(client, callback_query):
    try:
        username = callback_query.from_user.username or str(callback_query.from_user.id)
        transcription = get_state(username).get("transcription")
        
        if not transcription:
            await callback_query.answer("–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            await callback_query.message.edit_text(
                "‚ùå –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –∑–∞–Ω–æ–≤–æ.",
                reply_markup=None
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –∑–∞–Ω–æ–≤–æ
        keyboard = [
            [InlineKeyboardButton("üìù –ü–æ–∫–∞–∑–∞—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é", callback_data="action_show_transcription")],
            [InlineKeyboardButton("üß† –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —á–µ—Ä–µ–∑ ChatGPT", callback_data="action_process_gpt")],
            [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="back_to_language")]
        ]
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤–æ–∑–≤—Ä–∞—â–∞—è –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π
        await callback_query.message.edit_text(
            "‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
        await callback_query.answer("–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –∫ –≤—ã–±–æ—Ä—É –¥–µ–π—Å—Ç–≤–∏–π")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –≤—ã–±–æ—Ä—É –¥–µ–π—Å—Ç–≤–∏–π: {e}", exc_info=True)
        await callback_query.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
@app.on_callback_query(filters.regex(r"^page_(prev|next|info)$"))
async def handle_transcription_pagination(client, callback_query):
    try:
        username = callback_query.from_user.username or str(callback_query.from_user.id)
        action = callback_query.data.split("_")[1]
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        pages = get_state(username).get("transcription_pages", [])
        current_page = get_state(username).get("current_page", 0)
        total_pages = len(pages)
        
        if not pages:
            await callback_query.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
            
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        if action == "prev":
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
            if current_page > 0:
                current_page -= 1
                set_state(username, "current_page", current_page)
            else:
                await callback_query.answer("–í—ã —É–∂–µ –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
                return
        elif action == "next":
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
            if current_page < total_pages - 1:
                current_page += 1
                set_state(username, "current_page", current_page)
            else:
                await callback_query.answer("–í—ã —É–∂–µ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
                return
        elif action == "info":
            # –ü—Ä–æ—Å—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
            await callback_query.answer(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page + 1} –∏–∑ {total_pages}")
            return
            
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
        keyboard = []
        
        # –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        if total_pages > 1:
            nav_buttons = []
            nav_buttons.append(InlineKeyboardButton("‚óÄÔ∏è", callback_data="page_prev"))
            nav_buttons.append(InlineKeyboardButton(f"{current_page + 1}/{total_pages}", callback_data="page_info"))
            nav_buttons.append(InlineKeyboardButton("‚ñ∂Ô∏è", callback_data="page_next"))
            keyboard.append(nav_buttons)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_actions")])
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π
        await callback_query.message.edit_text(
            f"üìù **–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏** (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page + 1}/{total_pages}):\n\n{pages[current_page]}",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
        if action != "info":
            await callback_query.answer(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page + 1} –∏–∑ {total_pages}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º: {e}", exc_info=True)
        await callback_query.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ChatGPT
@app.on_callback_query(filters.regex(r"^gpt_page_(prev|next|info)$"))
async def handle_gpt_pagination(client, callback_query):
    try:
        username = callback_query.from_user.username or str(callback_query.from_user.id)
        action = callback_query.data.split("_")[2]
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        pages = get_state(username).get("gpt_result_pages", [])
        current_page = get_state(username).get("current_gpt_page", 0)
        total_pages = len(pages)
        
        if not pages:
            await callback_query.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
            
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        if action == "prev":
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
            if current_page > 0:
                current_page -= 1
                set_state(username, "current_gpt_page", current_page)
            else:
                await callback_query.answer("–í—ã —É–∂–µ –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
                return
        elif action == "next":
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
            if current_page < total_pages - 1:
                current_page += 1
                set_state(username, "current_gpt_page", current_page)
            else:
                await callback_query.answer("–í—ã —É–∂–µ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
                return
        elif action == "info":
            # –ü—Ä–æ—Å—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
            await callback_query.answer(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page + 1} –∏–∑ {total_pages}")
            return
            
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
        keyboard = []
        
        # –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        if total_pages > 1:
            nav_buttons = []
            nav_buttons.append(InlineKeyboardButton("‚óÄÔ∏è", callback_data="gpt_page_prev"))
            nav_buttons.append(InlineKeyboardButton(f"{current_page + 1}/{total_pages}", callback_data="gpt_page_info"))
            nav_buttons.append(InlineKeyboardButton("‚ñ∂Ô∏è", callback_data="gpt_page_next"))
            keyboard.append(nav_buttons)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_actions")])
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π
        await callback_query.message.edit_text(
            f"üß† **–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ ChatGPT** (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page + 1}/{total_pages}):\n\n{pages[current_page]}",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
        if action != "info":
            await callback_query.answer(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page + 1} –∏–∑ {total_pages}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º ChatGPT: {e}", exc_info=True)
        await callback_query.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    try:
        print("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        app.run()
    except KeyboardInterrupt:
        print("\n–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        # –û—á–∏—â–∞–µ–º –∫—ç—à –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        clean_cache()
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")