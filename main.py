"""
–ë–æ—Ç –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º AssemblyAI API
—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∫—ç—à–µ–º, –≤—ã–±–æ—Ä–æ–º —è–∑—ã–∫–∞ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
–∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ ChatGPT
"""
import os
import asyncio
import time
import uuid
import requests
import shutil
import signal
import sys
import subprocess
import json
import logging

from typing import Tuple, Dict, Any
from dotenv import load_dotenv
from openai import OpenAI
from pyrogram import Client, filters
from pyrogram.types import Message
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler("bot.log")
    ]
)
logger = logging.getLogger("assemblyai_bot")

API_ID = os.getenv("API_ID")
API_HASH = os.getenv("API_HASH")
BOT_TOKEN = os.getenv("BOT_TOKEN")
ASSEMBLYAI_API_KEY = os.getenv("ASSEMBLYAI_API_KEY")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

CACHE_DIR = os.path.join(os.getcwd(), "cache")
AUDIO_FILES_DIR = os.path.join(CACHE_DIR, "audio_files")
SESSION_DIR = os.path.join(CACHE_DIR, "sessions")

os.makedirs(CACHE_DIR, exist_ok=True)
os.makedirs(AUDIO_FILES_DIR, exist_ok=True)
os.makedirs(SESSION_DIR, exist_ok=True)

# –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç OpenAI
openai_client = None
if OPENAI_API_KEY:
    openai_client = OpenAI(api_key=OPENAI_API_KEY)

DEFAULT_PROMPT = "–°—É–º–º–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç –≤ –∫—Ä–∞—Ç–∫–æ–π —Ñ–æ—Ä–º–µ, –≤—ã–¥–µ–ª—è—è –æ—Å–Ω–æ–≤–Ω—ã–µ –º—ã—Å–ª–∏ –∏ –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã."

SUPPORTED_LANGUAGES = {
    "ru": "–†—É—Å—Å–∫–∏–πüá∑üá∫",
    "en": "–ê–Ω–≥–ª–∏–π—Å–∫–∏–πüá¨üáß",
}


user_prompts = {} 
user_current_prompts = {}  

MAX_STORED_PROMPTS = 5
user_states = {}

def clean_cache():
    """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∫—ç—à-–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
    print("–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞...")
    try:
        for dir_path in [AUDIO_FILES_DIR]:
            for filename in os.listdir(dir_path):
                file_path = os.path.join(dir_path, filename)
                if os.path.isfile(file_path):
                    os.remove(file_path)
                elif os.path.isdir(file_path):
                    shutil.rmtree(file_path)
        
        user_states.clear()
        print("–ö—ç—à –æ—á–∏—â–µ–Ω")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞: {e}")

def signal_handler(sig, frame):
    print("\n–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –∏ –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞...")
    clean_cache()
    sys.exit(0)

signal.signal(signal.SIGINT, signal_handler)
signal.signal(signal.SIGTERM, signal_handler)

clean_cache()

app = Client(
    "assemblyai_bot",
    api_id=API_ID,
    api_hash=API_HASH,
    bot_token=BOT_TOKEN,
    workdir=SESSION_DIR,
)

def get_state(username: str) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if username not in user_states:
        user_states[username] = {}
    return user_states[username]

def set_state(username: str, key: str, value: Any) -> None:
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if username not in user_states:
        user_states[username] = {}
    user_states[username][key] = value

def clear_state(username: str, key: str = None) -> None:
    """–û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if username in user_states:
        if key and key in user_states[username]:
            del user_states[username][key]
        else:
            user_states[username] = {}

def get_audio_duration(file_path):
    try:
        cmd = [
            "ffprobe",
            "-v", "error",
            "-show_entries", "format=duration",
            "-of", "json",
            file_path
        ]
        result = subprocess.run(cmd, capture_output=True, text=True)
        data = json.loads(result.stdout)
        return float(data["format"]["duration"])
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞: {e}")
        return 0

async def download_file(message: Message, file_id: str, save_path: str) -> Tuple[bool, str]:
    try:
        status_msg = await message.reply("‚è≥ –°–∫–∞—á–∏–≤–∞—é —Ñ–∞–π–ª...")
        
        os.makedirs(os.path.dirname(save_path), exist_ok=True)
        
        await app.download_media(message=file_id, file_name=save_path)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ –ø—É—Å—Ç–æ–π
        if not os.path.exists(save_path) or os.path.getsize(save_path) == 0:
            await status_msg.edit_text("‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ —Å–∫–∞—á–∞–ª—Å—è –∏–ª–∏ –ø—É—Å—Ç–æ–π")
            return False, "–§–∞–π–ª –Ω–µ —Å–∫–∞—á–∞–ª—Å—è –∏–ª–∏ –ø—É—Å—Ç–æ–π"
        
        file_size_mb = os.path.getsize(save_path) / (1024 * 1024)
        logger.info(f"–§–∞–π–ª —Å–∫–∞—á–∞–Ω: {save_path}, —Ä–∞–∑–º–µ—Ä: {file_size_mb:.2f} –ú–ë")
        
        await status_msg.edit_text("‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏:")
        
        return True, save_path
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}", exc_info=True)
        try:
            await status_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}")
        except:
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}")
        return False, str(e)

async def transcribe_with_assemblyai(audio_path: str, message: Message, status_msg: Message = None, target_language: str = "auto") -> Tuple[bool, str]:
    """
    –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∞—É–¥–∏–æ —Å –ø–æ–º–æ—â—å—é AssemblyAI API
    """
    try:
        if status_msg:
            await status_msg.edit_text("üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é...")
        else:
            status_msg = await message.reply("üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é...")
        
        start_time = time.time()
        
        file_size = os.path.getsize(audio_path)
        file_size_mb = file_size / (1024 * 1024)
        
        if file_size > 20 * 1024 * 1024:
            await status_msg.edit_text(f"‚öôÔ∏è –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({file_size_mb:.2f} –ú–ë). –û–ø—Ç–∏–º–∏–∑–∏—Ä—É—é...")
            compressed_path = os.path.join(AUDIO_FILES_DIR, f"{uuid.uuid4()}.mp3")
            
            compress_cmd = [
                "ffmpeg",
                "-i", audio_path,
                "-c:a", "libmp3lame",
                "-b:a", "64k",
                compressed_path
            ]
            
            result = subprocess.run(compress_cmd, capture_output=True, text=True)
            
            if os.path.exists(compressed_path) and os.path.getsize(compressed_path) > 0:
                compressed_size_mb = os.path.getsize(compressed_path) / (1024 * 1024)
                logger.info(f"–§–∞–π–ª —Å–∂–∞—Ç –¥–æ {compressed_size_mb:.2f} –ú–ë")
                audio_path = compressed_path
                await status_msg.edit_text(f"‚úÖ –§–∞–π–ª –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω ({compressed_size_mb:.2f} –ú–ë). –û—Ç–ø—Ä–∞–≤–ª—è—é –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é...")
        
        headers = {
            "authorization": ASSEMBLYAI_API_KEY,
            "content-type": "application/json"
        }
        
        with open(audio_path, "rb") as f:
            response = requests.post(
                "https://api.assemblyai.com/v2/upload",
                headers=headers,
                data=f,
                timeout=300
            )
        
        if response.status_code != 200:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {response.text}")
            await status_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {response.text}")
            return False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {response.text}"
            
        upload_url = response.json()["upload_url"]
        logger.info(f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω, URL: {upload_url}")
   
        target_lang_name = SUPPORTED_LANGUAGES.get(target_language, target_language)
        await status_msg.edit_text(f"‚è≥ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω. –ù–∞—á–∏–Ω–∞—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –Ω–∞ {target_lang_name}...")
        
        data = {"audio_url": upload_url}
        
        data["language_code"] = target_language
        
        response = requests.post(
            "https://api.assemblyai.com/v2/transcript",
            json=data,
            headers=headers
        )
        
        if response.status_code != 200:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è: {response.text}")
            await status_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {response.text}")
            return False, f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è: {response.text}"
        
        transcript_id = response.json()["id"]
        logger.info(f"ID —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {transcript_id}")
        
        last_update_time = time.time()
        
        while True:
            current_time = time.time()
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
            if current_time - last_update_time >= 10:
                elapsed_time = current_time - start_time
                await status_msg.edit_text(f"‚è≥ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É—é –∞—É–¥–∏–æ... ({elapsed_time:.0f}—Å)")
                last_update_time = current_time
            
            response = requests.get(
                f"https://api.assemblyai.com/v2/transcript/{transcript_id}",
                headers=headers
            )
            
            if response.status_code != 200:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞: {response.text}")
                await status_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {response.text}")
                return False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞: {response.text}"
            
            status = response.json()["status"]
            
            if status == "completed":
                detected_language = response.json().get("language_code", "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")
                detected_lang_name = SUPPORTED_LANGUAGES.get(detected_language, detected_language)
                
                transcription_text = response.json()["text"]
                
                await status_msg.edit_text(f"‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
                                        f"üëÇ –ò—Å—Ö–æ–¥–Ω—ã–π —è–∑—ã–∫ –∞—É–¥–∏–æ: {detected_lang_name}")
                
                return True, transcription_text
                
            elif status == "error":
                error_msg = response.json().get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                logger.error(f"–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {error_msg}")
                await status_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {error_msg}")
                return False, f"–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {error_msg}"
            
            await asyncio.sleep(3)
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {e}", exc_info=True)
        if status_msg:
            await status_msg.edit_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        else:
            await message.reply(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        return False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {str(e)}"
    
    finally:
        try:
            if os.path.exists(audio_path):
                os.remove(audio_path)
                logger.info(f"–£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {audio_path}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")

async def process_with_chatgpt(text, prompt, message):
    try:
        if not openai_client:
            return False, "‚ùå –û—à–∏–±–∫–∞: API –∫–ª—é—á OpenAI –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞."
        
        messages = [
            {
                "role": "system",
                "content": [{"type": "text", "text": prompt}]
            },
            {
                "role": "user",
                "content": [{"type": "text", "text": text}]
            }
        ]
        
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –≤ OpenAI —Å –Ω–æ–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º")
        
        response = openai_client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=messages,
            temperature=0.7,
            max_tokens=2000
        )
        
        result = response.choices[0].message.content

        return True, result
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ ChatGPT API: {e}", exc_info=True)
        return False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞: {str(e)}"

async def show_language_selection(message: Message, file_path: str) -> None:

    username = message.from_user.username or str(message.from_user.id)
    
    set_state(username, "file_path", file_path)
    
    keyboard = []
    
    for lang_code, lang_name in SUPPORTED_LANGUAGES.items():
        keyboard.append([
            InlineKeyboardButton(lang_name, callback_data=f"lang_{lang_code}")
        ])
    
    keyboard.append([
        InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="cancel_transcription")
    ])
    
    await message.reply(
        "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

def get_user_prompts(username):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –ø—Ä–æ–º–ø—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return user_prompts.get(username, [])

def add_user_prompt(username, prompt):
    """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if username not in user_prompts:
        user_prompts[username] = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø—Ä–æ–º–ø—Ç –≤ –∏—Å—Ç–æ—Ä–∏–∏
    if prompt in user_prompts[username]:
        # –ï—Å–ª–∏ –µ—Å—Ç—å - —É–¥–∞–ª—è–µ–º –µ–≥–æ, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ–Ω–µ—Ü (–∫–∞–∫ —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π)
        user_prompts[username].remove(prompt)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–º–ø—Ç –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞
    user_prompts[username].append(prompt)
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö—Ä–∞–Ω–∏–º—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤
    if len(user_prompts[username]) > MAX_STORED_PROMPTS:
        user_prompts[username] = user_prompts[username][-MAX_STORED_PROMPTS:]
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–º–ø—Ç
    user_current_prompts[username] = prompt

def set_user_prompt(username, prompt):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–º–ø—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_current_prompts[username] = prompt
    # –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –∏—Å—Ç–æ—Ä–∏—é
    add_user_prompt(username, prompt)

def get_current_prompt(username):
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–º–ø—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return user_current_prompts.get(username, "")

@app.on_callback_query(filters.regex(r"^lang_(.+)$"))
async def handle_language_selection(client, callback_query):
    try:
        language_code = callback_query.data.split("_")[1]
        
        username = callback_query.from_user.username or str(callback_query.from_user.id)
        file_path = get_state(username).get("file_path")
        
        if not file_path or not os.path.exists(file_path):
            await callback_query.answer("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –∑–∞–Ω–æ–≤–æ")
            return
        
        set_state(username, "language", language_code)
        
        lang_name = SUPPORTED_LANGUAGES.get(language_code, "–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π")
        await callback_query.answer(f"–í—ã–±—Ä–∞–Ω —è–∑—ã–∫: {lang_name}")
        
        status_msg = await callback_query.message.edit_text(
            f"üî§ –í—ã–±—Ä–∞–Ω —è–∑—ã–∫: {lang_name}\n‚è≥ –ù–∞—á–∏–Ω–∞—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é...",
            reply_markup=None
        )
        
        success, transcription = await transcribe_with_assemblyai(
            file_path, 
            callback_query.message, 
            status_msg, 
            language_code
        )
        
        if success:
            set_state(username, "transcription", transcription)
            
            keyboard = [
                [InlineKeyboardButton("üìù –ü–æ–∫–∞–∑–∞—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é", callback_data="show_transcription")],
                [InlineKeyboardButton("üß† –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —á–µ—Ä–µ–∑ ChatGPT", callback_data="process_gpt")],
                [InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
            ]
            
            await callback_query.message.reply(
                "‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
            logger.info(f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞ –¥–ª—è {username}, –¥–ª–∏–Ω–∞: {len(transcription)} —Å–∏–º–≤–æ–ª–æ–≤")
        else:
            await callback_query.message.reply(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é: {transcription}")
            
            clear_state(username)
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞: {e}", exc_info=True)
        await callback_query.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        username = callback_query.from_user.username or str(callback_query.from_user.id)
        clear_state(username)

@app.on_callback_query(filters.regex(r"^show_transcription$"))
async def show_transcription(client, callback_query):
    try:
        username = callback_query.from_user.username or str(callback_query.from_user.id)
        
        transcription = get_state(username).get("transcription")
        
        if not transcription:
            await callback_query.answer("–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        page_size = 3000
        pages = [transcription[i:i+page_size] for i in range(0, len(transcription), page_size)]
        total_pages = len(pages)
        
        set_state(username, "pages", pages)
        set_state(username, "current_page", 0)
        
        keyboard = []
        
        if total_pages > 1:
            nav_buttons = []
            nav_buttons.append(InlineKeyboardButton("‚óÄÔ∏è", callback_data="prev_page"))
            nav_buttons.append(InlineKeyboardButton(f"1/{total_pages}", callback_data="page_info"))
            nav_buttons.append(InlineKeyboardButton("‚ñ∂Ô∏è", callback_data="next_page"))
            keyboard.append(nav_buttons)
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")])
        
        await callback_query.message.edit_text(
            f"üìù **–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏** (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ 1/{total_pages}):\n\n{pages[0]}",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        await callback_query.answer("–ü–æ–∫–∞–∑—ã–≤–∞—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {e}", exc_info=True)
        await callback_query.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

@app.on_callback_query(filters.regex(r"^(prev|next)_page$"))
async def navigate_pages(client, callback_query):
    try:
        username = callback_query.from_user.username or str(callback_query.from_user.id)
        action = callback_query.data.split("_")[0]  # prev –∏–ª–∏ next
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        pages = get_state(username).get("pages", [])
        current_page = get_state(username).get("current_page", 0)
        total_pages = len(pages)
        
        if not pages:
            await callback_query.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
            
        if action == "prev":
            if current_page > 0:
                current_page -= 1
                set_state(username, "current_page", current_page)
            else:
                await callback_query.answer("–í—ã —É–∂–µ –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
                return
        elif action == "next":
            if current_page < total_pages - 1:
                current_page += 1
                set_state(username, "current_page", current_page)
            else:
                await callback_query.answer("–í—ã —É–∂–µ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
                return
            
        keyboard = []
        
        if total_pages > 1:
            nav_buttons = []
            nav_buttons.append(InlineKeyboardButton("‚óÄÔ∏è", callback_data="prev_page"))
            nav_buttons.append(InlineKeyboardButton(f"{current_page + 1}/{total_pages}", callback_data="page_info"))
            nav_buttons.append(InlineKeyboardButton("‚ñ∂Ô∏è", callback_data="next_page"))
            keyboard.append(nav_buttons)
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")])
        
        await callback_query.message.edit_text(
            f"üìù **–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏** (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page + 1}/{total_pages}):\n\n{pages[current_page]}",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        await callback_query.answer(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page + 1} –∏–∑ {total_pages}")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º: {e}", exc_info=True)
        await callback_query.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

@app.on_callback_query(filters.regex(r"^page_info$"))
async def page_info(client, callback_query):
    try:
        username = callback_query.from_user.username or str(callback_query.from_user.id)
        
        pages = get_state(username).get("pages", [])
        current_page = get_state(username).get("current_page", 0)
        total_pages = len(pages)
        
        await callback_query.answer(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page + 1} –∏–∑ {total_pages}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {e}", exc_info=True)
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@app.on_callback_query(filters.regex(r"^process_gpt$"))
async def process_gpt(client, callback_query):
    try:
        username = callback_query.from_user.username or str(callback_query.from_user.id)
        
        transcription = get_state(username).get("transcription")
        
        if not transcription:
            await callback_query.answer("–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
            
        if not openai_client:
            await callback_query.answer("ChatGPT –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            await callback_query.message.edit_text(
                "‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ ChatGPT –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.\n"
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
                ])
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º–ø—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π
        prompt = user_prompts.get(username, DEFAULT_PROMPT)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–º–ø—Ç –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è
        keyboard = [
            [InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É", callback_data="start_gpt_process")],
            [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–ø—Ç", callback_data="change_prompt")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
        ]
        
        await callback_query.message.edit_text(
            "üß† **–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–µ—Ä–µ–∑ ChatGPT**\n\n"
            f"üìù **–¢–µ–∫—É—â–∏–π –ø—Ä–æ–º–ø—Ç:**\n`{prompt}`\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        await callback_query.answer("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–µ—Ä–µ–∑ ChatGPT: {e}", exc_info=True)
        await callback_query.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

def get_main_keyboard(username):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–º–ø—Ç–æ–≤"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–º–ø—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    prompt = get_current_prompt(username)
    
    # –ö–æ—Ä–æ—Ç–∫–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ (–µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å)
    prompt_display = None
    if prompt:
        prompt_display = prompt[:25] + "..." if len(prompt) > 25 else prompt
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = [
        [InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É", callback_data="start_gpt_process")],
        [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–ø—Ç", callback_data="change_prompt")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ]
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–º–ø—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ
    if prompt_display:
        keyboard.insert(0, [InlineKeyboardButton(f"üìù –¢–µ–∫—É—â–∏–π –ø—Ä–æ–º–ø—Ç: {prompt_display}", callback_data="show_current_prompt")])
    
    return InlineKeyboardMarkup(keyboard)

@app.on_callback_query(filters.regex(r"^change_prompt$"))
async def change_prompt(client, callback_query):
    try:
        username = callback_query.from_user.username or str(callback_query.from_user.id)
        set_state(username, "awaiting_prompt", True)
        previous_prompts = get_user_prompts(username)
        keyboard = [[InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="back_to_gpt")]]
        
        for i, prompt in enumerate(previous_prompts):
            display_prompt = (prompt[:40] + "...") if len(prompt) > 40 else prompt
            keyboard.append([InlineKeyboardButton(f"üìú {display_prompt}", callback_data=f"use_prompt_{i}")])
        
        await callback_query.message.edit_text(
            "üìù **–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç**\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞—à–µ–≥–æ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–æ–º–ø—Ç–æ–≤:\n"
            "‚Ä¢ `–°—É–º–º–∏—Ä—É–π —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –∫—Ä–∞—Ç–∫–æ, –≤—ã–¥–µ–ª—è—è –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã.`\n"
            "‚Ä¢ `–ü—Ä–µ–æ–±—Ä–∞–∑—É–π —ç—Ç–æ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –≤ —á–µ—Ç–∫–∏–π –∫–æ–Ω—Å–ø–µ–∫—Ç —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏.`\n"
            "‚Ä¢ `–ò–∑–≤–ª–µ–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–ø–∏—Å–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π –∏ –∑–∞–¥–∞—á.`\n\n"
            + (("–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—à–∏—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –ø—Ä–æ–º–ø—Ç–æ–≤:") if previous_prompts else ""),
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        await callback_query.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç" + (" –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏" if previous_prompts else ""))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–æ–º–ø—Ç–∞: {e}", exc_info=True)
        await callback_query.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

@app.on_callback_query(filters.regex(r"^use_prompt_(\d+)$"))
async def use_previous_prompt(client, callback_query):
    try:
        username = callback_query.from_user.username or str(callback_query.from_user.id)
        prompt_index = int(callback_query.data.split("_")[-1])
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º–ø—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        previous_prompts = get_user_prompts(username)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–Ω–¥–µ–∫—Å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Å–ø–∏—Å–∫–∞
        if 0 <= prompt_index < len(previous_prompts):
            selected_prompt = previous_prompts[prompt_index]
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∫–∞–∫ —Ç–µ–∫—É—â–∏–π
            set_user_prompt(username, selected_prompt)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
            await callback_query.message.edit_text(
                f"‚úÖ –ü—Ä–æ–º–ø—Ç –≤—ã–±—Ä–∞–Ω:\n\n`{selected_prompt}`\n\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.",
                reply_markup=get_main_keyboard(username)  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è
            )
            await callback_query.answer("–ü—Ä–æ–º–ø—Ç —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω")
        else:
            await callback_query.answer("–ü—Ä–æ–º–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø—Ä–æ–º–ø—Ç–∞: {e}", exc_info=True)
        await callback_query.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

@app.on_callback_query(filters.regex(r"^start_gpt_process$"))
async def start_gpt_process(client, callback_query):
    try:
        username = callback_query.from_user.username or str(callback_query.from_user.id)
        
        transcription = str(get_state(username).get("transcription"))
        
        if not transcription:
            await callback_query.answer("–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
            
        prompt = str(user_prompts.get(username, DEFAULT_PROMPT))
        
        status_msg = await callback_query.message.edit_text(
            "üß† –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é ChatGPT...",
            reply_markup=None
        )
        
        success, response = await process_with_chatgpt(transcription, prompt, callback_query.message)
        
        await status_msg.edit_text("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ ChatGPT –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
        if not success:
            await callback_query.message.reply(
                f"‚ùå {response}",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
                ])
            )
            return
        
        page_size = 3000
        pages = [response[i:i+page_size] for i in range(0, len(response), page_size)]
        total_pages = len(pages)
        
        set_state(username, "gpt_pages", pages)
        set_state(username, "current_gpt_page", 0)
        
        keyboard = []
        
        if total_pages > 1:
            nav_buttons = []
            nav_buttons.append(InlineKeyboardButton("‚óÄÔ∏è", callback_data="prev_gpt_page"))
            nav_buttons.append(InlineKeyboardButton(f"1/{total_pages}", callback_data="gpt_page_info"))
            nav_buttons.append(InlineKeyboardButton("‚ñ∂Ô∏è", callback_data="next_gpt_page"))
            keyboard.append(nav_buttons)
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")])
        
        await callback_query.message.reply(
            f"üß† –°—Ç—Ä–∞–Ω–∏—Ü–∞ 1/{total_pages}:\n\n{pages[0]}",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ ChatGPT: {e}", exc_info=True)
        await callback_query.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        
        await callback_query.message.edit_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞: {str(e)}",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
            ])
        )

@app.on_callback_query(filters.regex(r"^(prev|next)_gpt_page$"))
async def navigate_gpt_pages(client, callback_query):
    try:
        username = callback_query.from_user.username or str(callback_query.from_user.id)
        action = callback_query.data.split("_")[0]  # prev –∏–ª–∏ next
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        pages = get_state(username).get("gpt_pages", [])
        current_page = get_state(username).get("current_gpt_page", 0)
        total_pages = len(pages)
        
        if not pages:
            await callback_query.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
            
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        if action == "prev":
            if current_page > 0:
                current_page -= 1
                set_state(username, "current_gpt_page", current_page)
            else:
                await callback_query.answer("–í—ã —É–∂–µ –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
                return
        elif action == "next":
            if current_page < total_pages - 1:
                current_page += 1
                set_state(username, "current_gpt_page", current_page)
            else:
                await callback_query.answer("–í—ã —É–∂–µ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
                return
            
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
        keyboard = []
        
        # –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        if total_pages > 1:
            nav_buttons = []
            nav_buttons.append(InlineKeyboardButton("‚óÄÔ∏è", callback_data="prev_gpt_page"))
            nav_buttons.append(InlineKeyboardButton(f"{current_page + 1}/{total_pages}", callback_data="gpt_page_info"))
            nav_buttons.append(InlineKeyboardButton("‚ñ∂Ô∏è", callback_data="next_gpt_page"))
            keyboard.append(nav_buttons)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")])
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π
        await callback_query.message.edit_text(
            f"üß† **–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ ChatGPT** (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page + 1}/{total_pages}):\n\n{pages[current_page]}",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
        await callback_query.answer(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page + 1} –∏–∑ {total_pages}")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º ChatGPT: {e}", exc_info=True)
        await callback_query.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

@app.on_callback_query(filters.regex(r"^gpt_page_info$"))
async def gpt_page_info(client, callback_query):
    try:
        username = callback_query.from_user.username or str(callback_query.from_user.id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö
        pages = get_state(username).get("gpt_pages", [])
        current_page = get_state(username).get("current_gpt_page", 0)
        total_pages = len(pages)
        
        await callback_query.answer(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page + 1} –∏–∑ {total_pages}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {e}", exc_info=True)
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@app.on_callback_query(filters.regex(r"^back_to_gpt$"))
async def back_to_gpt(client, callback_query):
    try:
        username = callback_query.from_user.username or str(callback_query.from_user.id)
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞
        set_state(username, "awaiting_prompt", False)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º–ø—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        prompt = user_prompts.get(username, DEFAULT_PROMPT)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–º–ø—Ç –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è
        keyboard = [
            [InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É", callback_data="start_gpt_process")],
            [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–ø—Ç", callback_data="change_prompt")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
        ]
        
        await callback_query.message.edit_text(
            "üß† **–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–µ—Ä–µ–∑ ChatGPT**\n\n"
            f"üìù **–¢–µ–∫—É—â–∏–π –ø—Ä–æ–º–ø—Ç:**\n`{prompt}`\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        await callback_query.answer("–í–µ—Ä–Ω—É–ª—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ GPT: {e}", exc_info=True)
        await callback_query.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

@app.on_callback_query(filters.regex(r"^back_to_menu$"))
async def back_to_menu(client, callback_query):
    try:
        username = callback_query.from_user.username or str(callback_query.from_user.id)
        clear_state(username)
        
        await show_main_menu(client, callback_query.message, username)
        await callback_query.answer("–í–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é: {e}", exc_info=True)
        await callback_query.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await show_main_menu(client, callback_query.message, username)

@app.on_callback_query(filters.regex(r"^cancel_transcription$"))
async def cancel_transcription(client, callback_query):
    try:
        username = callback_query.from_user.username or str(callback_query.from_user.id)
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        clear_state(username)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await show_main_menu(client, callback_query.message, username)
        
        await callback_query.answer("–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {e}", exc_info=True)
        await callback_query.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

async def show_main_menu(client, message, username):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    prompt = user_prompts.get(username, DEFAULT_PROMPT)
    
    keyboard = [
        [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="show_help")]
    ]
    
    try:
        await message.edit_text(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∞—É–¥–∏–æ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —á–µ—Ä–µ–∑ ChatGPT.\n\n"
            "üì± **–ß—Ç–æ —è —É–º–µ—é:**\n"
            "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å —è–∑—ã–∫ –∞—É–¥–∏–æ\n"
            "‚Ä¢ –ü–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ —Ä–∞–∑–Ω—ã–µ —è–∑—ã–∫–∏\n"
            "‚Ä¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ ChatGPT\n\n"
            "üéß –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.\n\n",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    except Exception:
        await message.reply(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∞—É–¥–∏–æ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —á–µ—Ä–µ–∑ ChatGPT.\n\n"
            "üì± **–ß—Ç–æ —è —É–º–µ—é:**\n"
            "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å —è–∑—ã–∫ –∞—É–¥–∏–æ\n"
            "‚Ä¢ –ü–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ —Ä–∞–∑–Ω—ã–µ —è–∑—ã–∫–∏\n"
            "‚Ä¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ ChatGPT\n\n"
            "üéß –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.\n\n",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

@app.on_callback_query(filters.regex(r"^show_help$"))
async def show_help(client, callback_query):
    try:
        languages_list = "\n".join([f"‚Ä¢ {name}" for code, name in SUPPORTED_LANGUAGES.items()])
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
        ]
        
        await callback_query.message.edit_text(
            "üìã **–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–∏–º –±–æ—Ç–æ–º:**\n\n"
            "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª (MP3, OGG, WAV –∏ –¥—Ä.)\n"
            "2. –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏\n"
            "3. –ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ:\n"
            "   - –ü—Ä–æ—Å—Ç–æ –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏\n"
            "   - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –≤ ChatGPT —Å –≤–∞—à–∏–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º\n\n"
            "**–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:**\n"
            "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
            "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
            "**–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏:**\n"
            f"{languages_list}",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        await callback_query.answer("–û—Ç–∫—Ä—ã–≤–∞—é —Å–ø—Ä–∞–≤–∫—É")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–ø—Ä–∞–≤–∫–∏: {e}", exc_info=True)
        await callback_query.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

@app.on_message(filters.command("start"))
async def start_command(client, message):
    username = message.from_user.username or str(message.from_user.id)
    await show_main_menu(client, message, username)

@app.on_message(filters.command("help"))
async def help_command(client, message):
    languages_list = "\n".join([f"‚Ä¢ {name}" for code, name in SUPPORTED_LANGUAGES.items()])
    
    await message.reply(
        "üìã **–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–∏–º –±–æ—Ç–æ–º:**\n\n"
        "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª (MP3, OGG, WAV –∏ –¥—Ä.)\n"
        "2. –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏\n"
        "3. –ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ:\n"
        "   - –ü—Ä–æ—Å—Ç–æ –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏\n"
        "   - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –≤ ChatGPT —Å –≤–∞—à–∏–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º\n\n"
        "**–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏:**\n"
        f"{languages_list}\n\n"
        "–ë–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é AssemblyAI –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏ –∏ ChatGPT –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞."
    )

@app.on_message(filters.text)
async def handle_text(client, message):
    if message.text.startswith('/'):
        return
    
    username = message.from_user.username or str(message.from_user.id)
    
    if get_state(username).get("awaiting_prompt", False):
        new_prompt = message.text
        add_user_prompt(username, new_prompt)
        set_state(username, "awaiting_prompt", False)

        await message.reply(
            f"‚úÖ –í–∞—à –ø—Ä–æ–º–ø—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n"
            f"üìù **–ù–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç:**\n`{new_prompt}`",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ ChatGPT", callback_data="back_to_gpt")]
            ])
        )
        return
    
    await message.reply(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏."
    )

@app.on_message(filters.audio | filters.voice | filters.document)
async def handle_audio(client, message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏–π, –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    try:
        username = message.from_user.username or str(message.from_user.id)
        
        if message.document and not message.document.mime_type.startswith("audio/"):
            file_ext = os.path.splitext(message.document.file_name)[1].lower() if message.document.file_name else ""
            if file_ext not in [".mp3", ".ogg", ".wav", ".flac", ".m4a", ".aac"]:
                await message.reply("–≠—Ç–æ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –Ω–µ –ø–æ—Ö–æ–∂ –Ω–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏.")
                return
        
        if get_state(username).get("transcribing", False):
            await message.reply(
                "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏. "
                "–î–æ–∂–¥–∏—Ç–µ—Å—å –µ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏."
            )
            return
        
        set_state(username, "transcribing", True)
        
        file_id = None
        file_name = None
        
        if message.audio:
            file_id = message.audio.file_id
            file_name = message.audio.file_name or f"audio_{message.id}.mp3"
        elif message.voice:
            file_id = message.voice.file_id
            file_name = f"voice_{message.id}.ogg"
        elif message.document:
            file_id = message.document.file_id
            file_name = message.document.file_name or f"document_{message.id}"
        else:
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª.")
            return
        
        file_name = f"{int(time.time())}_{file_name}"
        save_path = os.path.join(AUDIO_FILES_DIR, file_name)
        
        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        success, result = await download_file(message, file_id, save_path)
        
        if success:
            await show_language_selection(message, save_path)
        else:
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {result}")
            clear_state(username)
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞: {e}", exc_info=True)
        await message.reply(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞: {str(e)}")
        clear_state(username)

if __name__ == "__main__":
    try:
        print("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        app.run()
    except KeyboardInterrupt:
        print("\n–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        clean_cache()
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")